// Code generated by protoc-gen-go-scrpc. DO NOT EDIT.
// Path test.proto
// This is the client side implementation
// If you would like to generate the server side, please add --go-scrpc_opt=server=true to your protoc command

package test

import (
	context "context"
	side_car "github.com/victor-leee/plugin/github.com/victor-leee/side-car"
	scrpc "github.com/victor-leee/scrpc"
	scrpc1 "github.com/victor-leee/scrpc/github.com/victor-leee/scrpc"
)

var client scrpc.Client

func init() {
	client = scrpc.NewClient()
}

type HelloService interface {
	SayHello(ctx context.Context, req *HelloRequest) (*HelloResponse, error)
	SayWoc(ctx context.Context, req *WocRequest) (*HelloResponse, error)
}

type HelloServiceImpl struct {
}

func (*HelloServiceImpl) SayHello(ctx context.Context, req *HelloRequest) (*HelloResponse, error) {
	resp := &HelloResponse{}
	err := client.UnaryRPCRequest(&scrpc.RequestContext{
		Ctx:           ctx,
		Req:           req,
		ReqService:    "test-victor-leee-github-com",
		ReqMethod:     "SayHello",
		SenderService: "caller-victor-leee-github-com",
		Resp:          resp,
	})
	return resp, err
}
func (*HelloServiceImpl) SayWoc(ctx context.Context, req *WocRequest) (*HelloResponse, error) {
	resp := &HelloResponse{}
	err := client.UnaryRPCRequest(&scrpc.RequestContext{
		Ctx:           ctx,
		Req:           req,
		ReqService:    "test-victor-leee-github-com",
		ReqMethod:     "SayWoc",
		SenderService: "caller-victor-leee-github-com",
		Resp:          resp,
	})
	return resp, err
}

func GetConfig(ctx context.Context, key string) (*side_car.GetConfigResponse, error) {
	resp := &side_car.GetConfigResponse{}
	err := client.UnaryRPCRequest(&scrpc.RequestContext{
		Ctx:           ctx,
		Req:           &side_car.GetConfigReq{Key: key},
		MessageType:   scrpc1.Header_CONFIG_CENTER.Enum(),
		SenderService: "github.com/victor-leee/caller",
		Resp:          resp,
	})
	return resp, err
}
