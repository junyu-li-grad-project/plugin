package main

import (
	"fmt"
	"google.golang.org/protobuf/compiler/protogen"
)

func generateServer(gen *protogen.Plugin, file *protogen.File) {
	filename := file.GeneratedFilenamePrefix + "_go-scrpc.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-scrpc. DO NOT EDIT.")
	g.P("// Path ", file.Desc.Path())
	g.P("// This is the server side implementation")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	// init ServerInterface
	g.P("var server ", scrpcPkg.Ident("Server"))
	g.P(fmt.Sprintf(`func init() {
	server = scrpc.NewServer("%s")
}`, convertGoPath2DNS(defaultCfg.Service)))
	g.P()
	g.P(`func GetServer() scrpc.Server {
return server
}`)

	// generate services
	for _, service := range file.Services {
		generateServerServices(g, service)
	}
	g.P()
	generateConfigCenter(g)
}

func generateServerServices(g *protogen.GeneratedFile, serviceDef *protogen.Service) {
	g.P("type ", serviceDef.GoName, " interface{")
	for _, method := range serviceDef.Methods {
		generateMethod(g, method)
	}
	g.P("}")

	// then generate Register func
	g.P("func Register", serviceDef.GoName, "(handler ", serviceDef.GoName, ") {")
	generateRegisterFunction(g, serviceDef)
	g.P("}")
}

func generateRegisterFunction(g *protogen.GeneratedFile, serviceDef *protogen.Service) {
	for _, method := range serviceDef.Methods {
		g.P(`server.RegisterHandler("`, method.GoName, `", func(b []byte) (`, protoPkg.Ident("Message"), `, error) {`)
		g.P(`req := &`, method.Input.GoIdent.GoName, `{}`)
		g.P(`if unmarshalErr := proto.Unmarshal(b, req); unmarshalErr != nil {
		return nil, unmarshalErr
}`)
		g.P(`return handler.`, method.GoName, "(", ctxPkg.Ident("Background()"), `, req)`)
		g.P(`})`)
	}
}
