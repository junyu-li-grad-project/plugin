package main

import (
	"fmt"
	"google.golang.org/protobuf/compiler/protogen"
	"gopkg.in/yaml.v2"
	"io/ioutil"
	"os"
)

var earthPkg = protogen.GoImportPath("github.com/victor-leee/earth")
var netPkg = protogen.GoImportPath("net")
var protoPkg = protogen.GoImportPath("google.golang.org/protobuf/proto")
var pluginGenPkg = protogen.GoImportPath("github.com/victor-leee/plugin/github.com/victor-leee/plugin")
var earthGenPkg = protogen.GoImportPath("github.com/victor-leee/earth/github.com/victor-leee/earth")
var ioPkg = protogen.GoImportPath("io")

var file *protogen.File

type Config struct {
	Service string `json:"service" yaml:"service"`
}

var defaultCfg *Config

func main() {
	defaultPath := "./.scrpc.yml"
	cfg, parseErr := parseConfig(defaultPath)
	if parseErr != nil {
		panic(parseErr)
	}
	defaultCfg = cfg

	protogen.Options{}.Run(func(plugin *protogen.Plugin) error {
		for _, f := range plugin.Files {
			if !f.Generate {
				continue
			}
			file = f
			generateFile(plugin, f)
		}

		return nil
	})
}

func generateCommon(f *protogen.File, g *protogen.GeneratedFile) {
	g.P("func blockRead(reader ", ioPkg.Ident("Reader"), ", size uint64)", " ([]byte, error) {")
	g.P(`	b := make([]byte, size)
	already := 0
	inc := 0
	var err error
	for uint64(already) < size {
		if inc, err = reader.Read(b[already:]); err != nil {
			return nil, err
		}
		already += inc
	}

	return b, nil
}`)
}

func parseConfig(file string) (*Config, error) {
	f, err := os.Open(file)
	if err != nil {
		return nil, fmt.Errorf("parseConfig.Open:%w", err)
	}
	b, err := ioutil.ReadAll(f)
	if err != nil {
		return nil, fmt.Errorf("parseConfig.ReadAll:%w", err)
	}
	cfg := &Config{}
	if err = yaml.Unmarshal(b, cfg); err != nil {
		return nil, fmt.Errorf("parseConfig.Unmarshal:%w", err)
	}

	return cfg, nil
}

func generateFile(gen *protogen.Plugin, file *protogen.File) {
	filename := file.GeneratedFilenamePrefix + "_go-scrpc.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-scrpc. DO NOT EDIT.")
	g.P("// path ", file.Desc.Path())
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	generateCommon(file, g)

	g.P("func init(){")
	// init connection manager
	g.P(earthPkg.Ident("InitConnManager(func(cname string) ("), earthPkg.Ident("ConnPool, error) {"))
	g.P("return ", earthPkg.Ident("NewPool("), earthPkg.Ident("WithInitSize(10),"),
		earthPkg.Ident("WithMaxSize(50),"), earthPkg.Ident("WithFactory(func() ("), netPkg.Ident("Conn,"), "error) {")
	g.P("return ", netPkg.Ident(`Dial("unix", cname)`))
	g.P(`}))`)
	g.P(`})`)
	g.P("}")

	// generate services
	for _, service := range file.Services {
		generateService(g, service)
	}
}

func generateService(g *protogen.GeneratedFile, serviceDef *protogen.Service) {
	// generate interface and default implementation based on serviceDef
	// generate interface first
	g.P("type ", serviceDef.GoName, " interface{")
	for _, method := range serviceDef.Methods {
		generateMethod(g, method)
	}
	g.P("}")

	// then we generate a default impl for the interface
	g.P()
	g.P("type ", serviceDef.GoName, "Impl", " struct{")
	g.P("}")
	for _, method := range serviceDef.Methods {
		generateMethodImpl(serviceDef.GoName, g, method)
	}
}

func generateMethod(g *protogen.GeneratedFile, methodDef *protogen.Method) {
	g.P(methodDef.GoName, " (req *", methodDef.Input.GoIdent.GoName, ") (*", methodDef.Output.GoIdent.GoName, ", error)")
}

func generateMethodImpl(service string, g *protogen.GeneratedFile, methodDef *protogen.Method) {
	g.P("func (*", service, "Impl) ", methodDef.GoName, "(req *", methodDef.Input.GoIdent.GoName, ") (*", methodDef.Output.GoIdent.GoName, ", error){")
	generateBody(g, methodDef)
	g.P("}")
}

func generateBody(g *protogen.GeneratedFile, methodDef *protogen.Method) {
	g.P("b, _ := ", protoPkg.Ident("Marshal(req)"))
	g.P("protoResponse := &", methodDef.Output.GoIdent.GoName, "{}")
	g.P("outErr := ", earthPkg.Ident(`GlobalConnManager().Func("/tmp/sc.sock", func(conn `), netPkg.Ident("Conn)"), " error", " {")
	g.P("// block send & receive message")
	g.P("rpcReq := &", pluginGenPkg.Ident("UnaryRPCRequest{"))
	g.P("Method: ", `"`, methodDef.GoName, `"`, ",")
	g.P("RequestParameter: &", pluginGenPkg.Ident("Parameter"), "{")
	g.P("MarshalledParam: b,")
	g.P("},")
	g.P("}")
	g.P("b, _ = ", protoPkg.Ident("Marshal(rpcReq)"))
	g.P("_, err := ", earthPkg.Ident("FromProtoMessage(rpcReq, &"), earthGenPkg.Ident("Header{"))
	g.P("SenderServiceName: ", `"`, defaultCfg.Service, `",`)
	g.P("ReceiverServiceName: ", file.GoImportPath.String(), ",")
	g.P("MessageType: ", earthGenPkg.Ident("Header_SIDE_CAR_PROXY,"))
	g.P("TraceId: ", `"trace_id",`, "// TODO")
	g.P("}).Write(conn)")
	g.P("if err != nil {")
	g.P("return err")
	g.P("}")
	g.P()
	// start response
	g.P("response, err := ", earthPkg.Ident("FromReader(conn, blockRead)"))
	g.P("if err != nil {")
	g.P("return err")
	g.P("}")
	g.P("if err = ", protoPkg.Ident("Unmarshal"), "(response.Body, protoResponse); err != nil {")
	g.P("return err")
	g.P("}")
	g.P()
	g.P("return nil")
	g.P("})")

	g.P("if outErr != nil {")
	g.P("return nil, outErr")
	g.P("}")

	g.P()
	g.P("return protoResponse, nil")
}
